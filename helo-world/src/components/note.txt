Function--
        *Simple functions
        *Use Function components as much as possible
        *Absence of 'this' keyword
        *Solution without using state
        *Mainly responsible for the using
        *Stateless/Dump/Presentational

Class--
    *More feature rich
    *Maintain their own private data-state
    *Complex UI logic
    *Provide lifecycle hooks
    *stateful/Smart/Container

JSX-- javaScript XML(JSX)
    -Extension to the JS language syntax
    -JSX tags have a tag name,attributes, and children
    -it makes your react code simpler and elegant


Constructor(props) -- * A special function that will get called whenever a new component is created.
                      * Initializing state Binding the event handlers
                      * Do not cause side effects. Ex:HTTP requests
                      * super(props) - Directly overwrite this.state


Render() - only required method
         - read props & state and return JSX


Pure Component - a pure component implmements shouldComponentUpdate with a shallow prop and state comparison.

Context - context provides a way to pass data through the component three without having to pass props down manually at every level.

Hooks - they allow you to use react features withput having to write a class      
      - only call hooks at the top level

sueStateHook - the useState hook lets you add state to functional components
             - in classes, the state is always an object
             -with the useState hook, the state doesn't have to ba an object
             -the first element is the current value of the state, and the second element is a state setter function.
             
context - context provides a way to pass data through the company tree without having to pass props down manually at every level. '

useState - state
useEffect - side effects
userContext - context API
useReducer - reducers

useReducer - useReducer is a hook that is used for state management

reduce in JS - array.reduce(reducer, initialValue)
             - singleValue = reducer(accumulator ,itemValue)
 
useReduce in React - useReducer(reducer, initialState)
                   - newState = reducer(currentState, action)

useCallback Hook - useCallback is a hook that will return a memoized version of the callback function that only changes
                   if one of the dependencies has changed

State immutability and Render - Mutating an object or array as state will not cause a re-render when used with the useState
                                or useReducer hook

                                To re-render,make a copy of the existing state,modify as necessary and then pass the new state
                                ot tge setter function or while returing from a reducer function                